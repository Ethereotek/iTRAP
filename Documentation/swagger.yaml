openapi: 3.0.3
info:
  title: Banana - Touch Remote API 1.0.0
  description: |-
    The Banana API provides an interface for remote access to and control of a TouchDesigner instance by
    wrapping much of the Python API and through NAPs, which simplifies access to operators and their parameters. 

  version: 1.0.0
externalDocs:
  description: GitHub Repository
  url: https://github.com/Ethereotek/iTRAP
servers:
  - url: http://localhost:29980/api/banana
  - url: http://192.168.50.23:29980/api/banana
tags:
  - name: permissions
    description: Information about the scopes assigned to the api key passed in the header
  - name: application
    description:  Information about the TouchDesigner Application, including version, transport state, etc.
    externalDocs:
      description: Derivative Documentation
      url: https://docs.derivative.ca/App_Class
  - name: project
    description: Information about the current TouchDesigner session
    externalDocs:
      description: Derivative Documentation
      url: https://docs.derivative.ca/Project_Class
  - name: sysinfo
    description: Current system and hardware information
    externalDocs:
      description: Derivative Documentation
      url: https://docs.derivative.ca/SysInfo_Class
  - name: ui
    description: The UI class describes access to the UI elements of the application
    externalDocs:
      description: Derivative Documentation
      url: https://docs.derivative.ca/UI_Class
  - name: monitors
    description: Access to information about all connected display devices
    externalDocs:
      description: Derivative Documentation
      url: https://docs.derivative.ca/Monitors_Class
  - name: operators
    description: Access and perform methods on all operators
    externalDocs:
      description: Derivative Documentation
      url: https://docs.derivative.ca/OP_Class
  - name: named operators
    description: Access and perform methods on operators that have been aliased using NAPs
    externalDocs:
      description: NAPs Github
      url: https://github.com/Ethereotek/NAPs
  - name: named parameters
    description: Access and perform methods on parameters that have been aliased using NAPs
    externalDocs:
      description: NAPs Github
      url: https://github.com/Ethereotek/NAPs
paths:
  /permission:
    get:
      tags:
        - permissions
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  scopes:
                    type: array
                    items:
                      anyOf:
                        - type: string
                          enum:
                            - app.*
                  exclusions:
                    type: array
                    items:
                      anyOf:
                        - type: string
                          enum:
                            - app.*.put
                            - project.*.post
        '401':
          $ref: '#/components/responses/401'
  /app/architecture:
    get:
      tags:
        - application
      summary: Returns the computer architecture
      description: The architecture of the compile. Generally 32 or 64 bit.
      operationId: app.architecture

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Application Architecture
                  scope: 
                    type: string
                    default: app.architecture
                  description: 
                    type: string
                    default: The architecture of the compile. Generally 32 or 64 bit.
                  built-in:
                    type: boolean
                  data:
                    type: object
                    properties:
                      value:
                        type: integer
                        enum:
                          - 64
                          - 32
                      type:
                        type: string
                        enum:
                          - int
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                          default: 'self'
                        href:
                          type: string
                          default: http://localhost:29980/api/banana/app/architecture
        '401':
          $ref: '#/components/responses/401'
  /app/build:
    get:
      tags:
        - application
      summary: Returns build number of TouchDesigner application
      description: ''
      operationId: app.build

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    default: Application Build
                  scope:
                    type: string
                    default: app.build
                  description:
                    type: string
                    default: Application build number
                  built-in:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value:
                        type: string
                        default: '2022.32660'
                      type:
                        type: string
                        default: 'str'
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                          default: self
                        href: 
                          type: string
                          default: http://localhost:29980/api/banana/app/build
        '401':
          $ref: '#/components/responses/401'
  /app/launchTime:
    get:
      tags:
        - application
      summary: Returns time to start .toe file
      description: Total time required to launch and begin playing the toe file, measured in seconds
      operationId: app.launchTime
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Application Launch Time
                  scope:
                    type: string
                    default: app.launchTime
                  description: 
                    type: string
                    default: Total time required to launch and begin playing the toe file, measured in seconds.
                  built-in:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value:
                        type: number
                        default: 7.893428
                        minimum: 0.0
                      type:
                        type: string
                        default: 'float'
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                        href:
                          type: string
                    default:
                      - rel: self
                        href: http://localhost:29980/api/banana/app/launchTime
                      - rel: app.startTimestamp
                        href: http://localhost:29980/api/banana/app/startTimestamp
                        

        '401':
          $ref: '#/components/responses/401'
  /app/startTimestamp:
    get:
      tags:
        - application
      summary: Returns time at which a .toe file started
      description: ''
      operationId: app.startTimestamp
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Application Start Timestamp
                  scope:
                    type: string
                    default: app.startTimestamp
                  description: 
                    type: string
                    default: UNIX timestamp recorded when the application starts.
                  built-in:
                    type: boolean
                    default: false
                  data:
                    type: object
                    properties:
                      value:
                        type: number
                        default: 1682977375.6273248
                        minimum: 0.0
                      type:
                        type: string
                        default: 'float'
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                        href:
                          type: string
                    default:
                      - rel: self
                        href: http://localhost:29980/api/banana/app/startTimestamp
                      
                      - rel: app.launchTime
                        href: http://localhost:29980/api/banana/app/launchTime
        '401':
          $ref: '#/components/responses/401'
  /app/osName:
    get:
      tags:
        - application
      summary: Return the operating system name.
      description: The operating system name.
      operationId: app.osName

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    default: Application OS Name
                  scope:
                    type: string
                    default: app.osName
                  description:
                    type: string
                    default: The operating system name.
                  built-in:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value:
                        type: string
                        default: 'Windows'
                      type:
                        type: string
                        default: 'str'
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                          default: self
                        href: 
                          type: string
                          default: http://localhost:29980/api/banana/app/osName
        '401':
          $ref: '#/components/responses/401'
  /app/power:
    get:
      tags:
        - application
      summary: Get the processing state of the application.
      description: The processing state of the application has a greater effect than simply pausing or stopping the playbar.
      operationId: app.power
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    default: Application Power
                  scope:
                    type: string
                    default: app.power
                  description:
                    type: string
                    default: Processing state of the application. This has a greater effect than simply pausing or stopping the playbar.
                  built-in:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value:
                        type: boolean
                        default: true
                      type:
                        type: string
                        default: 'bool'
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                          default: self
                        href: 
                          type: string
                          default: http://localhost:29980/api/banana/app/power
        '401':
          $ref: '#/components/responses/401'
    put:
      tags:
        - application
      summary: Set the power state of the application.
      description: The power state has a greater effect than the transport control. Note that if you turn off the power, you cannot turn it back on with an API call.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  enum:
                    - on
                    - off
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties:
                      name:
                        type: string
                        default: Application Power
                      scope:
                        type: string
                        default: app.power
                      data:
                        type: object
                        properties:
                          value:
                            type: boolean
                            default: true
                          type:
                            type: string
                            default: boolean
                      links:
                        type: array
                        items:
                          type: object
                          properties:
                            rel:
                              type: string
                              default: self
                            href: 
                              type: string
                              default: http://localhost:29980/api/banana/app/power
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
          
  /app/product:
    get:
      tags:
        - application
      summary: Returns application product type
      description: Type of executable the project is running under. Values are 'TouchDesigner', 'TouchPlayer' or 'TouchEngine'.
      operationId: getAppProduct
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    default: Application Product
                  scope:
                    type: string
                    default: app.product
                  description:
                    type: string
                    default: Type of executable the project is running under.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value:
                        type: string
                        enum:
                          - TouchDesigner
                          - TouchPlayer
                          - TouchEngine
                      type:
                        type: string
                        default: str
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                        href: 
                          type: string
                    default:
                      - rel: self
                        href: http://localhost:29980/api/banana/app/product
                      - rel: app.version
                        href: http://localhost:29980/api/banana/app/version
                      - rel: app.build
                        href: http://localhost:29980/api/banana/app/build
                      
        '401':
          $ref: '#/components/responses/401'
  /app/version:
    get:
      tags:
        - application
      summary: Application version number
      description: Application version number
      operationId: getAppVersion
      
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    default: Application Version
                  scope:
                    type: string
                    default: app.version
                  description:
                    type: string
                    default: Application version number.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value:
                        type: string
                        default: '099'
                        enum:
                          - '099'
                          - '088'
                          - '077'
                      type:
                        type: string
                        default: str
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                        href: 
                          type: string
                      default:
                      - rel: app.version
                        href: http://localhost:29980/api/banana/app/product
                      - rel: self
                        href: http://localhost:29980/api/banana/app/version
                      - rel: app.build
                        href: http://localhost:29980/api/banana/app/build
        '401':
          $ref: '#/components/responses/401'
  /app/play:
    get:
      tags:
        - application
      summary: Gets the play state of the transport
      operationId: time.play
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Application Transport State
                  scope: 
                    type: string  
                    default: app.play
                  description:
                    type: string
                    default: Indicates whether the application is playing or stopped.
                  built-in:
                    type: boolean
                    default: false
                  data:
                    type: object
                    properties:
                      value:
                        type: integer
                        default: 1
                      type:
                        type: string
                        default: int
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                          default: self
                        href: 
                          type: string
                          default: http://localhost:29980/api/banana/app/play                
        '401':
          $ref: '#/components/responses/401'
    put:
      tags:
        - application
      summary: Sets the play state of the transport
      description: |- 
        Accepts the following values:  
          - `-1`  for back  
          
          -  `0`  for pause
          -  `1`  for forward
  
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                play:
                  type: integer
                  minimum: -1
                  maximum: 1
                  
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties:
                      name: 
                        type: string
                        default: Application Transport State
                      scope: 
                        type: string
                        default: app.play
                      description: 
                        type: string
                        default: Indicates whether the application is playing or stopped.
                      data:
                        type: integer
                        default: 1
                        minimum: -1
                        maximum: 1
                      links:
                        type: array
                        items:
                          type: object
                          properties:
                            rel:
                              type: string
                              default: self
                            href: 
                              type: string
                              default: http://localhost:29980/api/banana/app/play                    
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
  
  /project/name:

    get:
      tags:
        - project
      summary: The filename under which the project is saved.
      description: The filename under which the project is saved.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Project Name
                  scope: 
                    type: string
                    default: project.name
                  description: 
                    type: string
                    default: The filename under which the project is saved.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                    
                      value: 
                        type: string
                        default: dev.toe
                      type: 
                        type: string
                        default: str
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                      
                        rel: 
                          type: string
                          default: self
                        href: 
                          type: string
                          default: http://192.168.50.23:29980/api/banana/project/name
        '401':
          $ref: '#/components/responses/401'
  /project/saveVersion:
    get:
      tags:
        - project
      summary: Get the App version when project was last saved.
      description: The App version number when the project was last saved.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Project Save Version
                  scope: 
                    type: string
                    default: project.saveVersion
                  description: 
                    type: string
                    default: The App version number when the project was last saved.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                    
                      value: 
                        type: string
                        example: '099'
                        enum:
                          - '099'
                          - '088'
                          - '077'
                      type: 
                        type: string
                        enum: 
                          - str
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
                    
                    default:
                      - rel: self
                        href: http://localhost:29980/api/banana/project/saveVersion
                      - rel: Application Version
                        href: http://localhost:29980/api/banana/app/version
        '401':
          $ref: '#/components/responses/401'
  /project/saveBuild:
    get:
      tags:
        - project
      summary: The App build number when the project was last saved.
      description: The App build number when the project was last saved.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Project Save Build
                  scope: 
                    type: string
                    default: project.saveBuild
                  description: 
                    type: string
                    default: The App build number when the project was last saved.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value: 
                        type: string
                        example: '2022.32660'
                      type: 
                        type: string
                        enum:
                          - str 
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
                    
                    default:
                      - rel: self
                        href: http://localhost:29980/api/banana/project/saveBuild
                      - rel: Application Build
                        href: http://localhost:29980/api/banana/app/build
        '401':
          $ref: '#/components/responses/401'
  /project/saveTime:
    get:
      tags:
        - project
      summary: The time and date the project was last saved.
      description: The time and date the project was last saved.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Project Save Time
                  scope: 
                    type: string
                    default: project.saveTime
                  description: 
                    type: string
                    default: The time and date the project was last saved.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                    
                      value: 
                        type: string
                        example: 'Thu May  4 21:34:54 2023'
                      type: 
                        type: string
                        enum: 
                          - datetime
        '401':
          $ref: '#/components/responses/401'
  
  /project/saveOSName:
    get:
      tags:
        - project
      summary: The App operating system name when the project was last saved.
      description: The App operating system name when the project was last saved.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Project Save OS Name
                  scope: 
                    type: string
                    default: project.saveOSName
                  description: 
                    type: string
                    default: The App operating system name when the project was last saved.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value:
                        type: string
                        example: Windows
                        enum:
                          - Windows
                          - MacOS
                      type: 
                        type: string
                        enum:
                          - str
        '401':
          $ref: '#/components/responses/401'
  /project/saveOSVersion:
    get:
      tags:
        - project
      summary: The App operating system version when the project was last saved.
      description: The App operating system version when the project was last saved.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                
                  name: 
                    type: string
                    default: Project Save OS Version
                  scope: 
                    type: string
                    default: project.saveOSVersion
                  description: 
                    type: string
                    default: The App operating system version when the project was last saved.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value: 
                        type: string
                        example: '10'
                      type:
                        type: string
                        enum:
                          - str
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel: 
                          type: string
                          default: self
                        href: 
                          type: string
                          default: http://localhost:29980/api/banana/project/saveOSVersion
        '401':
          $ref: '#/components/responses/401'
  /project/paths:
    get:
      tags:
        - project
      summary: Returns the user-defined `paths` dictionary
      description: A dictionary which can be used to define URL-syntax path prefixes, enabling you to move your media to different locations easily.
      externalDocs:
        description: Derivative Documentation 
        url: https://docs.derivative.ca/Project_Class#paths
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum:
                      - Project Paths
                  scope:
                    type: string
                    enum:
                      - project.paths
                  description:
                    type: string
                    enum:
                      - A dictionary which can be used to define URL-syntax path prefixes, enabling you to move your media to different locations easily.
                  built-in:
                    type: boolean
                    enum:
                      - true
                      
                  data:
                    type: object
                    properties:
                      value:
                        type: object
                        example:
                          content: 'C:\Users\user\Documents\TouchDesigner\Project1\Content'
                          Documents: 'C:\Users\user\Documents'
                      type:
                        type: string
                        enum:
                          - dict
        '401':
          $ref: '#/components/responses/401'
          
    # put:
    #   tags:
    #     - project
    #   responses:
    #     '200':
    #       description: 'OK'
  /project/paths/new:
    post:
      tags:
        - project
      summary: Creates a new path in the project paths dictionary
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                path:
                  type: string
                  description: Absolute path to directory on host machine
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties:
                      name:
                        type: string
                        default: Project Path
                      scope:
                        type: string
                        enum:
                          - project.paths
                      description:
                        type: string
                      built-in:
                        type: boolean
                        enum:
                          - true
                      data:
                        type: object
                        properties:
                          value:
                            type: object
                            example:
                              ExamplePath: C:\Users\user\ExampleDirectory
                          type:
                            type: string
                            enum:
                              - dict
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: 'Conflict'
          content:
            application/json:
              schema:
                type: object
                properties:
                  conflict:
                    type: string
                    example: The named path X already exists. Ues PUT to change it or choose a different name.
  /project/paths/path/{name}:
      put:
        tags:
          - project
        summary: Update an existing project path
        parameters:
          - name: name
            in: path
            required: true
            schema:
              type: string
          - name: path
            required: true
            in: query
            schema:
              type: string
        responses:
          '200':
            description: 'OK'
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Project Path X
                        scope:
                          type: string
                          enum:
                            - project.paths
                        data:
                          type: object
                          properties:
                            value:
                              type: string
                              example: C:\Users\user\Documents\ExampleDirectory
                            type:
                              type: string
                              enum:
                                - str
          '401':
            $ref: '#/components/responses/401'
            
  /project/cookRate:
    get:
      tags:
        - project
      summary: Return the maximum number of frames processed each second.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Project Cook Rate
                  scope: 
                    type: string
                    default: project.cookRate
                  description: 
                    type: string
                    default: The maximum number of frames processed each second.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value: 
                        type: number
                        default: 60
                      type: 
                        type: string
                        default: float
        '401':
          $ref: '#/components/responses/401'
    put:
      tags:
        - project
      summary: Set the maximum number of frames processed each second.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rate:
                  type: number
                  minimum: 1
                  default: 60
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties:
                      name: 
                        type: string
                        default: Project Cook Rate
                      scope: 
                        type: string
                        default: project.cookRate
                      data:
                        type: object
                        properties:
                          value: 
                            type: number
                            default: 60
                          type: 
                            type: string
                            default: float
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
          
  /project/realTime:
    get:
      tags:
        - project
      summary: Get the real time cooking state.
      description: 'When True, frames may be skipped in order to maintain the cookRate. When False, all frames are processed sequentially regardless of duration.'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Project Realtime
                  scope: 
                    type: string
                    default: project.realTime
                  description: 
                    type: string
                    default: The maximum number of frames processed each second.
                  built-in: 
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      value: 
                        type: number
                        default: 60
                      type: 
                        type: string
                        default: float    
        '401':
          $ref: '#/components/responses/401'
          
    put:
      tags:
        - project
      summary: Set the real time cooking state.
      description: 'When True, frames may be skipped in order to maintain the cookRate. When False, all frames are processed sequentially regardless of duration.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                realTime:
                  type: boolean

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties: 
                      name: 
                        type: string
                        default: Project Real Time
                      scope: 
                        type: string
                        default: project.realTime
                      data:
                        type: object
                        properties:
                          value: 
                            type: boolean
                            default: true
                          type: 
                            type: string
                            default: bool
        '401':
          $ref: '#/components/responses/401'
          
  /project/performOnStart:
    get:
      tags:
        - project
      summary: Get the perform on start state.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum:
                      - Project Perform on Start
                  scope:
                    type: string
                    enum:
                      - project.performOnStart
                  description:
                    type: string
                    default: If True, project starts in perform mode
                  built-in:
                    type: boolean
                    enum:
                      - true
                  data:
                    type: object
                    properties:
                      value:
                        type: boolean
                        default: false
                      type:
                        $ref: '#/components/schemas/pythonBool'
        '401':
          $ref: '#/components/responses/401'
    put:
      tags:
        - project
      summary: Set the perform on start state.
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                performOnStart:
                  type: boolean
      responses:
        '200':
          description: 'OK'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
  /project/load:
    post:
      tags:
        - project
      summary: Load a specific .toe file from disk.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  default: default.toe

      
      responses:
        '200':
          description: 'OK'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /project/save:
    post:
      tags:
        - project
      summary: Save the currently running project to disk.
      description: Save the current session to disk. If `path` is not provided the default/current filename is used. 
      parameters:
        - name: path
          in: query
          required: false
          schema:
            type: string

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
  /project/quit:

    post:
      tags:
        - project
      summary: Quit the project.
      responses:
        '200':
          description: 'OK'
  /sysinfo/numCPUs:
    get:
      tags:
        - sysinfo
      summary: The number of CPUs/cores on the system.
      description: The number of CPUs/cores on the system.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum:
                      - System CPU Count
                  scope:
                    type: string
                    enum:
                      - sysinfo.numCPUs
                  description: 
                    type: string
                    enum:
                      - The number of CPUs/cores on the system.
                  data:
                    type: object
                    properties:
                      value:
                        type: integer
                        minimum: 2
                        example: 8
                      type:
                        type: string
                        enum:
                          - int
                  links:
                    type: array
                    items:
                      type: object
        '401':
          $ref: '#/components/responses/401'
  /sysinfo/ram:
    get:
      tags:
        - sysinfo
      summary: Amount of available RAM memory.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum:
                      - System RAM
                  scope:
                    type: string
                    enum:
                      - sysinfo.ram
                  description: 
                    type: string
                    enum:
                      - Amount of available RAM memory.
                  data:
                    type: object
                    properties:
                      value:
                        type: integer
                        minimum: 0
                        example: 34299
                      type:
                        type: string
                        enum:
                          - int
                  links:
                    type: array
                    items:
                      type: object
        '401':
          $ref: '#/components/responses/401'
  /ui/masterVolume:
    get:
      tags:
        - ui
      summary: Get the master audio output volume.
      description: A value of 0 is no output, while a value of 1 is full output.
      responses:
        '200':
          description: 'OK'
    put:
      tags:
        - ui
      summary: Set the master audio output volume.
      description: A value of 0 is no output, while a value of 1 is full output.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                volume:
                  type: number
                  minimum: 0.0
                  maximum: 1.0
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum:
                      - UI Master Volume
                  scope:
                    type: string
                    enum:
                      - ui.masterVolume
                  description:
                    type: string
                    enum:
                      - ''
                  data:
                    type: object
                    properties:
                      value:
                        type: number
                        minimum: 0.0
                        maximum: 1.0
                      type:
                        $ref: '#/components/schemas/pythonFloat'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
  /monitors:
    get:
      tags:
        - monitors
      summary: Get a description of all connected monitors
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum:
                      - Monitors
                  scope:
                    type: string
                    enum:
                      - monitors
                  description:
                    type: string
                    enum:
                      - Monitors connected to machine
                  built-in:
                    type: boolean
                    enum:
                      - true
                  data:
                    type: object
                    properties:
                      value:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            description:
                              type: string
                            index:
                              type: integer
                          example:
                            name: "\\\\.\\Display1"
                            description: Asus VP247
                            index: 0
  /monitors/monitor/{monitor}:
    get:
      tags:
        - monitors
      summary: Get a description of all a specific monitor.
      parameters:
        - name: monitor
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Monitor
                  scope:
                    type: string
                    enum:
                      - monitors.monitor
                  description:
                    type: string
                    enum:
                      - Description of a monitor instance
                  built-in:
                    type: boolean
                    enum:
                      - true
                  data:
                    type: object
                    properties:
                      description:
                        type: object
                        properties:
                          value:
                            type: string
                            example: ASUS VP247
                          type:
                            type: string
                            enum:
                              - str
                          isPrimary:
                            type: object
                            properties:
                              value:
                                type: boolean
                              type:
                                type: string
                                enum:
                                  - str
                          resolution:
                            type: object
                            properties:
                              width:
                                type: object
                                properties:
                                  value:
                                    type: integer
                                    example: 1920
                                  type:
                                    type: string
                                    enum:
                                      - str
                              height:
                                type: object
                                properties:
                                  value:
                                    type: integer
                                    example: 1080
                                  type:
                                    type: string
                                    enum:
                                      - str
                          position:
                            type: object
                            properties:
                              left:
                                type: object
                                properties:
                                  value:
                                    type: integer
                                    example: 0
                                  type:
                                    type: string
                                    enum:
                                      - int
                              right:
                                type: object
                                properties:
                                  value:
                                    type: integer
                                    example: 1919
                                  type:
                                    type: string
                                    enum:
                                      - int
                              top:
                                type: object
                                properties:
                                  value:
                                    type: integer
                                    example: 1079
                                  type:
                                    type: string
                                    enum:
                                      - int
                              bottom:
                                type: object
                                properties:
                                  value:
                                    type: integer
                                    example: 0
                                  type:
                                    type: string
                                    enum:
                                      - int
                          refreshRate:
                            type: object
                            properties:
                              value:
                                type: number
                                example: 59.94005
                              type:
                                type: string
                                enum:
                                  - float
  /monitors/monitor/{monitor}/{attribute}:
    get:
      tags:
        - monitors
      summary: Get a specific attribute a connected monitor.
      parameters:
        - name: monitor
          in: path
          required: true
          schema:
            type: integer
        - name: attribute
          in: path
          required: true
          schema:
            type: string
            enum:
              - isPrimary
              - isAffinity
              - width
              - height
              - left
              - right
              - top
              - bottom
              - displayName
              - description
              - dpiSacle
              - scaledWidth
              - scaledHeight
              - scaledLeft
              - scaledRight
              - scaledTop
              - scaledBottom
              - serialNumber
            
      responses:
        '200':
          description: 'OK'
  /op/opIdMap:
    get:
      tags:
        - operators
      summary: Get a mapping of operator paths to id's
      description: The Op-ID map selectively exposes operator ID's, this object can be used to get the ID's of target operators.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
  /op:
    get:
      tags:
        - operators
      summary: Get an operator dictionary
      description: Returns useful attributes of an operator as a JSON object; either the absolute path or the id must be provided as a query parameter.
      parameters:
        - $ref: '#/components/parameters/QueryPath'
        - $ref: '#/components/parameters/QueryId'

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    enum: 
                      - Operator
                  scope: 
                    type: string
                    enum:
                      - op
                  description: 
                    type: string
                    enum:
                      - ''
                  built-in: 
                    type: boolean
                    enum: 
                      - true
                  data:
                    type: object
                    properties:
                      id: 
                        type: integer
                        minimum: 0
                        example: 5972
                      name: 
                        type: string
                        example: project1
                      path: 
                        type: string
                        example: /project1
                      time:
                        type: object
                        properties: 
                          path: 
                            type: string
                            example: /local/time
                          id: 
                            type: integer
                            example: 6246
                      parent:
                        type: object
                        properties:
                          path: 
                            type: string
                            example: /
                          id: 
                            type: integer
                            example: 0
                      type:
                        type: object
                        properties: 
                          label: 
                            type: string
                            example: Container
                          family: 
                            type: string
                            example: COMP
                          type: 
                            type: string
                            example: container
                          subType: 
                            type: string
                            example: panel
                          OPType: 
                            type: string
                            example: containerCOMP

        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - operators
      summary: Create an operator
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - type
              - parent
              properties:
                name: 
                  type: string
                  example: operator_name
                type:
                  type: string
                  example: textDAT
                parent:
                  type: string
                  example: /project1

      responses:
        '201':
          description: 'Created'
        '400':
          $ref: '#/components/responses/400'
        '409':
          description: 'Conflict'
          content:
            application/json:
              schema:
                type: object
                properties:
                  conflict:
                    type: string
                    enum:
                      - Parent does not exist
    delete:
      tags:
        - operators
      summary: Destroys an operator

      responses:
        '200':
          description: 'OK'
  /op/attributes/{attribute}:
    get:
      tags:
        - operators
      summary: Get operator attribute
      parameters:
        - name: path
          required: false
          in: query
          schema:
            type: string
        - name: attribute
          required: true
          in: path
          schema:
            type: string
        
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Operator X {attribute-name}
                  scope:
                    type: string
                    example: ops.attribute
                  data:
                    type: object
                    properties:
                      value:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
                      type:
                        $ref: '#/components/schemas/dataTypeEnum'
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        rel:
                          type: string
                          enum:
                            - self
                        href:
                          type: string
                          example: http://localhost:29980/api/banana/op/name?id=5972

    put:
      tags:
        - operators
      parameters:
        - name: path
          required: false
          in: query
          schema:
            type: string
        - name: attribute
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Operator X {attribute-name}
                      scope:
                        type: string
                        enum:
                          - ops.attribute
                      data:
                        type: object
                        properties:
                          value:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                          type:
                            $ref: '#/components/schemas/dataTypeEnum'
                      links:
                        type: array
                        items:
                          type: object
                          properties:
                            rel:
                              type: string
                              enum:
                                - self
                            href:
                              type: string
                              example: http://192.168.50.23:29980/api/banana/op/name?id=41769
  /op/id:
    get:
      tags:
        - operators
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    default: Operator ID
                  scope:
                    type: string
                    enum:
                      - op.id
                  description:
                    type: string
                    enum:
                      - Unique integer identifier.
                  built-in:
                    type: boolean
                    enum:
                      - true
                  data:
                    type: object
                    properties:
                      value:
                        type: integer
                        minimum: 0
                        example: 6102
                      type:
                        type: string
                        enum:
                          - int
  /op/storage:
    get:
      tags:
        - operators
      parameters:
        - name: path
          in: query
          required: false
          schema:
            type: string
        - name: id
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    default: Operator Storage
                  scope:
                    type: string
                    enum:
                      - op.storage
                  description:
                    type: string
                    enum:
                      - ''
                  data:
                    type: object
                    properties:
                      value:
                        type: object
                      type:
                        type: string
                        enum:
                          - dict
  /op/tags:
    get:
      tags:
        - operators
      parameters:
        - $ref: '#/components/parameters/QueryPath'
        - $ref: '#/components/parameters/QueryId'

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    default: Operator Tags
                  scope:
                    type: string
                    enum:
                      - op.tags
                  description:
                    type: string
                    enum:
                      - ''
                  data:
                    type: object
                    properties:
                      value:
                        type: array
                        items: 
                          type: string
                      type:
                        type: string
                        enum:
                          - set
                      
        '404':
          description: 'Resource Not Found'
  /op/tags/{tag}:
    post:
      tags:
        - operators
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/QueryPath'
        - $ref: '#/components/parameters/QueryId'
        
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                  scope:
                    type: string 
                    enum:
                      - op.tags
                  description:
                    type: string
                  data:
                    type: object
                    properties:
                      value:
                        type: string
                      type:
                        type: string
                        enum:
                          - str
    delete:
      tags:
        - operators
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
  /op/par:
    get:
      tags:
        - operators
      summary: Get operator parameter
      parameters:
        - $ref: '#/components/parameters/QueryPathReq'
        - name: par
          in: query
          required: true
          schema:
            type: string
          description: Name of the parameter to query
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: 'Operator X parameter Y'
                  scope:
                    type: string
                    enum:
                      - ops.par
                  description:
                    type: string
                    enum:
                      - ''
                  data:
                    type: object
                    properties:
                      value:
                        oneOf:
                          - type: number
                          - type: string
                          - type: boolean
                      type:
                        type: string
                        enum:
                          - int
                          - float
                          - bool
                          - str
    put: 
      tags:
        - operators
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - path
                - par
                - val
              properties:
                path:
                  type: string
                par:
                  type: string
                val:
                  type: string

      responses:
        '200':
          description: 'OK'
  /op/par/puse:
    post:
      tags:
        - operators
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - path
                - par
              properties:
                path:
                  type: string
                par:
                  type: string
      responses:
        '200':
          description: 'OK'
  # /namedOps:
  #   get:
  #     tags:
  #       - named operators
  #     responses:
  #       '200':
  #         description: 'OK'
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 operator_name:
  #                   type: string
  #                   default: path/to/operator
  /namedOps/op/{name}:
    get:
      tags:
        - named operators
      summary: Get a description of a Named Operator.
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
  /namedOps/op/{name}/attribute/{attribute}:
    get:
      tags:
        - named operators
      summary: Get the attribute value of a Named Operator.
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
        - name: attribute
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'OK'

    put:
      tags:
        - named operators
      summary: Update the value of an attribute of a Named Operator
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
        - name: attribute
          in: path
          schema:
            type: string
          required: true
        - name: value
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'OK'
  /namedOps/op/{name}/par/{par}:
    get:
      tags:
        - named operators
      summary: Get the value of a parameter of a Named Operator.
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
        - name: par
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: number
                            minimum: 0
                            example: 41736
                          name:
                            type: string
                            description: Name of the operator as it appears in the TouchDesigner network.
                            example: noise1
                          path:
                            type: string
                            example: /project1/noise1
                          time:
                            type: object
                            properties:
                              path: 
                                type: string
                                default: /local/time
                              id:
                                type: number
                                example: 6159
                          parent:
                            type: object
                            properties:
                              path:
                                type: string
                              id:
                                type: number
                                example: 5972
                          type:
                            type: object
                            properties:
                              label:
                                type: string
                                example: Noise
                              family:
                                $ref: '#/components/schemas/operatorFamily'
                              type:
                                type: string
                              subType:
                                type: string
                              OPType:
                                type: string
                                default: noiseTOP
                              
                              
        '404':
          description: 'Resource Not Found'
  # /namedPars:
  #   get:
  #     tags:
  #       - named parameters
  #     responses:
  #       '200':
  #         description: 'OK'
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: object
  #                 properties:
  #                   par_name:
  #                     type: string
  #                     default: some_par
  #                   owner:
  #                     type: object
  #                     properties:
  #                       path:
  #                         type: string
  #                         default: path/to/owner
  #                       id:
  #                         type: number
  #                         default: 1234
  /namedPars/par/{name}:
    get:
      tags:
        - named parameters
      summary: Get the value of a Named Parameter
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
    put:
      tags:
        - named parameters
      summary: Update the value of a Named Parameter
      description: There are two types of Named Parameters in this context, scalar and vector. Scalars are those with a single value, vectors are those such as radius or transform, that have multiple components. They are updated through the same call. For vector parameters, the top-level name is the Named Parameter, the contained names will be the actual names of the parameters in TouchDesigner, such as "tx" or "ry".
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string

      requestBody:

        content:
          application/json:
            schema:
              oneOf:
              - type: object
                properties:
                  parameter:
                    type: object
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                        enum:
                          - scalar
                      value:
                        oneOf:
                          - type: string
                          - type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                value:
                                  oneOf:
                                    - type: string
                                    - type: number
                                    - type: boolean
              - type: object
                properties:
                  parameter:
                    type: object
                    properties:
                      name:
                        type: string
                      type: 
                        type: string
                        enum:
                          - vector
                      value:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: rx
                            value:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      success:
                        type: object
                        properties:
                          name: 
                            type: string
                            example: geo_tx
                          scope:
                            type: string
                            enum:
                              - namedPars
                          description:
                            type: string
                          data:
                            type: object
                            properties:
                              value:
                                oneOf:
                                  - type: number
                                  - type: string
                              type:
                                $ref: '#/components/schemas/dataTypeEnum'
                          
                  - type: object
                    properties:
                      success:
                        type: array
                        items:
                          type: object
                          example:
                            rx:
                              value: 90.0
                              type: 'float'
 
components:
  schemas:
    operatorLabels:
      type: string
      enum:
        - Noise
    operatorFamily:
      type: string
      enum:
        - COMP
        - TOP
        - CHOP
        - DAT
        - SOP
        - MAT
    dataTypeEnum:
      type: string
      enum:
        - float
        - int
        - str
        - bool
    pythonFloat:
      type: string
      enum:
        - float
    pythonString:
      type: string
      enum:
        - str
    pythonBool:
      type: string
      enum:
        - bool
    link:
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
  parameters:
    QueryPath:
      name: path
      in: query
      description: Absolute path to the operator
      required: false
      schema:
        type: string
    QueryId:
      name: id
      in: query
      description: Unique integer ID of operator
      required: false
      schema:
        type: integer
        
    QueryPathReq:
      name: path
      in: query
      description: Absolute path to the operator
      required: true
      schema:
        type: string
    BodyPathReq:
      name: path
      in: query
      description: Absolute path to the operator
      required: true
      schema:
        type: string
    

  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                  - Missing params, or wrong type.
                  - Bad JSON formatting.
    '401':
      description: Not Authorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                  - no permissions found
    '404':
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            
  securitySchemes:
    api-key:
      type: apiKey
      in: header
      name: Authorization
